 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })
app.get('/:date', function(req, res){
  
 var date = req.params.date;

//the object to return
var container ={
  'unix':null,
  'natural':null,
}

//Months object from abrv to complete
var months = {
  'Jan':'January',
  'Feb':'February',
  'Mar':'March',
  'Apr':'April',
  'May':'Mai',
  'Jun':'June',
  'Jul':'July',
  'Aug':'August',
  'Sep':'September',
  'Oct':'October',
  'Nov':'November',
  'Dec':'December'
}

//converts a timestamp to a natural date
function fromUnixToNatural(timestamp){
  var naturalDate = new Date(timestamp*1000).toString();
    naturalDate = naturalDate.split(" ");
    naturalDate = months[naturalDate[1]] +" "+naturalDate[2]+ ", "+ naturalDate[3];
    return  naturalDate;
}

//checking if the parameter is a timestamp
if(parseInt(date)){
    container.unix = parseInt(date);
    container.natural = fromUnixToNatural(container.unix);
  }else{
    var dateObject = new Date(date);
    if(dateObject && dateObject.toString() != "Invalid Date"){
    container.unix = Date.parse(date);
    container.natural = fromUnixToNatural(container.unix/1000);
  }
  }
  res.json(container);
})


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

